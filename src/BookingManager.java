import java.io.*;
import java.util.*;

public class BookingManager implements FileHandler{
    private static final File f = new File("data/BookingData");
    private final List<Booking> bookingList;
    private final Scanner sc;
    private final CustomerManager customerManager;
    private final RoomManager roomManager;

    public BookingManager(CustomerManager customerManager, RoomManager roomManager, Scanner sc) {
        this.customerManager = customerManager;
        this.roomManager = roomManager;
        bookingList = new ArrayList<>();
        this.sc = sc;
    }

    // ====== Sinh ID t·ª± ƒë·ªông ======
    private int generateNewBookingID() {
        return bookingList.stream().mapToInt(Booking::getBookingID).max().orElse(0) + 1;
    }

    // ====== T√≠nh gi·∫£m gi√° theo h·∫°ng kh√°ch ======
    private double calculateDiscount(String rank) {
        if (rank.equalsIgnoreCase("Silver")) return 0.05;
        if (rank.equalsIgnoreCase("Gold")) return 0.10;
        return 0;
    }

    // ====== Ki·ªÉm tra ph√≤ng c√≥ tr√πng l·ªãch ho·∫∑c ƒëang c√≤n trong th·ªùi gian ƒë·∫∑t ======
    private boolean isRoomAvailable(int roomID, String checkInDate, int numDays) {
        for (Booking b : bookingList) {
            if (b.getRoomID() == roomID) {
                // N·∫øu ph√≤ng tr√πng ID => ki·ªÉm tra xem c√≤n trong th·ªùi gian ƒë·∫∑t
                // ƒê∆°n gi·∫£n h√≥a: ch·ªâ c·∫ßn tr√πng ng√†y check-in ho·∫∑c ch∆∞a h·∫øt s·ªë ng√†y l√† b√°o tr√πng
                if (b.getCheckInDate().equalsIgnoreCase(checkInDate)) {
                    return false; // tr√πng ng√†y check-in
                }
            }
        }
        return true;
    }

    // ====== Th√™m booking ======
    public void addBooking() {
        System.out.print("Nh·∫≠p t√™n kh√°ch h√†ng: ");
        String name = sc.nextLine();
        Customer customer = customerManager.findCustomerByName(name);

        if (customer == null) {
            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng trong h·ªá th·ªëng. Vui l√≤ng th√™m kh√°ch h√†ng tr∆∞·ªõc.");
            return;
        }

        System.out.println("‚úÖ Kh√°ch h√†ng t√¨m th·∫•y: " + customer);

        // N·∫øu kh√°ch n√†y ƒë√£ c√≥ booking => hi·ªÉn th·ªã th√¥ng tin c√°c booking hi·ªán c√≥
        for (Booking b : bookingList) {
            if (b.getCustomerName().equalsIgnoreCase(name)) {
                System.out.printf("BookingID: %d | Ph√≤ng: %d | CheckIn: %s | S·ªë ng√†y: %d | T·ªïng ti·ªÅn: %.0f\n",
                        b.getBookingID(), b.getRoomID(), b.getCheckInDate(), b.getNumOfDays(), b.getTotalPrice());
            }
        }

        System.out.print("B·∫°n c√≥ mu·ªën ƒë·∫∑t th√™m ph√≤ng? (Y/N): ");
        String opt = sc.nextLine().trim().toUpperCase();
        if (!opt.equals("Y")) {
            System.out.println("Tho√°t kh·ªèi ch·ª©c nƒÉng ƒë·∫∑t ph√≤ng.");
            return;
        }

        int roomID;
        String checkInDate;
        int days;

        while (true) {
            System.out.print("Nh·∫≠p ID ph√≤ng: ");
            roomID = Integer.parseInt(sc.nextLine());

            Room room = roomManager.searchByID(String.valueOf(roomID));
            if (room == null) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng v·ªõi ID n√†y. Nh·∫≠p l·∫°i!");
                continue;
            }

            System.out.print("Nh·∫≠p ng√†y check-in (dd/mm/yyyy): ");
            checkInDate = sc.nextLine();

            System.out.print("Nh·∫≠p s·ªë ng√†y ƒë·∫∑t: ");
            days = Integer.parseInt(sc.nextLine());

            if (!isRoomAvailable(roomID, checkInDate, days)) {
                System.out.println("‚ö†Ô∏è Ph√≤ng n√†y ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t ho·∫∑c ch∆∞a tr·ªëng. Vui l√≤ng ch·ªçn ph√≤ng kh√°c!");
            } else {
                break;
            }
        }

        // T√≠nh ti·ªÅn
        double roomPrice = roomManager.searchByID(String.valueOf(roomID)).getRoomPrice();
        double discount = calculateDiscount(customer.getMemberRank());
        double total = roomPrice * days * (1 - discount);

        int bookingID = generateNewBookingID();
        Booking newBooking = new Booking(bookingID, name, roomID, checkInDate, days, total);
        bookingList.add(newBooking);

        // TƒÉng usageCount cho kh√°ch
        customer.setUsageCount(customer.getUsageCount() + 1);
        customer.updateMemberRank();

        System.out.println("üéâ ƒê·∫∑t ph√≤ng th√†nh c√¥ng! M√£ ƒë·∫∑t ph√≤ng: " + bookingID);
        System.out.printf("T·ªïng ti·ªÅn: %.0f (Gi·∫£m %.0f%% theo h·∫°ng %s)\n",
                total, discount * 100, customer.getMemberRank());
    }

    // ====== S·ª≠a booking ======
    public void updateBooking() {
        System.out.print("Nh·∫≠p Booking ID c·∫ßn s·ª≠a: ");
        int id = Integer.parseInt(sc.nextLine());
        for (Booking b : bookingList) {
            if (b.getBookingID() == id) {
                System.out.printf("BookingID: %d | %s | Ph√≤ng %d | CheckIn: %s | Ng√†y: %d | T·ªïng: %.0f\n",
                        b.getBookingID(), b.getCustomerName(), b.getRoomID(), b.getCheckInDate(), b.getNumOfDays(), b.getTotalPrice());
                System.out.print("Nh·∫≠p s·ªë ng√†y m·ªõi: ");
                int days = Integer.parseInt(sc.nextLine());
                b.setNumOfDays(days);
                System.out.println("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                return;
            }
        }
        System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y Booking ID n√†y!");
    }

    // ====== X√≥a booking ======
    public void deleteBooking() {
        System.out.print("Nh·∫≠p Booking ID c·∫ßn x√≥a: ");
        int id = Integer.parseInt(sc.nextLine());
        boolean removed = bookingList.removeIf(b -> b.getBookingID() == id);
        if (removed) System.out.println("üóëÔ∏è ƒê√£ x√≥a ƒë·∫∑t ph√≤ng th√†nh c√¥ng!");
        else System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y m√£ ƒë·∫∑t ph√≤ng!");
    }

    // ====== Xem l·ªãch ƒë·∫∑t theo t√™n kh√°ch ======
    public void viewBookingByCustomer() {
        System.out.print("Nh·∫≠p t√™n kh√°ch h√†ng: ");
        String name = sc.nextLine();
        boolean found = false;
        for (Booking b : bookingList) {
            if (b.getCustomerName().equalsIgnoreCase(name)) {
                System.out.println(b);
                found = true;
            }
        }
        if (!found) System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y l·ªãch ƒë·∫∑t ph√≤ng cho kh√°ch n√†y!");
    }

    public void showAllBookings() {
        for(Booking b : bookingList) {
            System.out.println(b);
        }
    }

    public Booking searchBookingByID(int ID) {
        for (Booking b : bookingList) {
            if (b.getBookingID() == ID)
                return b;
        }
        return null;
    }

    public Booking searchBookingByCustomerName(String name) {
        for (Booking b : bookingList) {
            if (b.getCustomerName().equalsIgnoreCase(name))
                return b;
        }
        return null;
    }

    // ====== MENU ======
    public void showMenu() {
        while (true) {
            System.out.println("\n--- QU·∫¢N L√ù ƒê·∫∂T PH√íNG ---");
            System.out.println("1. Th√™m ƒë·∫∑t ph√≤ng");
            System.out.println("2. S·ª≠a ƒë·∫∑t ph√≤ng");
            System.out.println("3. X√≥a ƒë·∫∑t ph√≤ng");
            System.out.println("4. Xem l·ªãch ƒë·∫∑t theo kh√°ch h√†ng");
            System.out.println("5. Xem t·∫•t c·∫£ l·ªãch ƒë·∫∑t");
            System.out.println("0. L∆∞u & Tho√°t");
            System.out.print("Ch·ªçn: ");
            String choice = sc.nextLine();
            switch (choice) {
                case "1" -> addBooking();
                case "2" -> updateBooking();
                case "3" -> deleteBooking();
                case "4" -> viewBookingByCustomer();
                case "5" -> showAllBookings();
                case "0" -> {
                    saveToFile();
                    return;
                }
                default -> System.out.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
            }
        }
    }

    // ====== ƒê·ªçc d·ªØ li·ªáu booking t·ª´ file ======
    public void readFromFile() {
        bookingList.clear();
        if (!f.exists()) {
            System.out.println("Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu ƒë·∫∑t ph√≤ng");
            return;
        }

        try (BufferedReader br = new BufferedReader(new FileReader(f))) {
            br.readLine(); // b·ªè ti√™u ƒë·ªÅ
            String line;
            while ((line = br.readLine()) != null) {
                String[] info = line.split(",");
                int bookingID = Integer.parseInt(info[0]);
                String customerName = info[1];
                int roomID = Integer.parseInt(info[2]);
                String checkInDate = info[3];
                int numDays = Integer.parseInt(info[4]);
                double totalPrice = Double.parseDouble(info[5]);

                bookingList.add(new Booking(bookingID, customerName, roomID, checkInDate, numDays, totalPrice));
            }
        } catch (IOException e) {
            System.out.println("L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ file BookingData");
        }
    }

    // ====== L∆∞u d·ªØ li·ªáu booking v√†o file ======
    public void saveToFile() {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(f))) {
            bw.write("BookingID,CustomerName,RoomID,CheckInDate,NumOfDays,TotalPrice");
            bw.newLine();

            for (Booking b : bookingList) {
                String line = String.format("%d,%s,%d,%s,%d,%.2f",
                        b.getBookingID(), b.getCustomerName(), b.getRoomID(),
                        b.getCheckInDate(), b.getNumOfDays(), b.getTotalPrice());
                bw.write(line);
                bw.newLine();
            }
        } catch (IOException e) {
            System.out.println("L·ªói khi l∆∞u d·ªØ li·ªáu v√†o file BookingData");
        }
    }
}